{"ast":null,"code":"import axios from 'axios';\n\n// Create a new Axios instance\nconst apiClient = axios.create({\n  baseURL: 'http://127.0.0.1:5000/api'\n});\n\n// ✨ Add a request interceptor\napiClient.interceptors.request.use(config => {\n  // Get the token from localStorage\n  const token = localStorage.getItem('access_token');\n\n  // If the token exists, add it to the Authorization header\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // Do something with request error\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject"],"sources":["/Users/satvikkesarwani/Downloads/VEXOCORE/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a new Axios instance\nconst apiClient = axios.create({\n  baseURL: 'http://127.0.0.1:5000/api'\n});\n\n// ✨ Add a request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    // Get the token from localStorage\n    const token = localStorage.getItem('access_token');\n    \n    // If the token exists, add it to the Authorization header\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    return config;\n  }, \n  (error) => {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;EAElD;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EAEA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}